from string import punctuation

from aiogram import F, Bot, types, Router
from aiogram.filters import Command, CommandStart
from aiogram.utils.formatting import (
    as_list,
    as_marked_section,
    Bold,
)  # Italic, as_numbered_list –∏ —Ç–¥

from kbds.reply import get_keyboard
from common.restricted_words import restricted_words
# from filters.chat_types import ChatTypeFilter



user_group_router = Router()
# user_group_router.message.filter(ChatTypeFilter(["group", "supergroup"]))
# user_group_router.edited_message.filter(ChatTypeFilter(["group", "supergroup"]))




@user_group_router.message(Command("admin"))
async def get_admins(message: types.Message, bot: Bot):
    chat_id = message.chat.id
    admins_list = await bot.get_chat_administrators(chat_id)
    #–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    #print(admins_list)
    # –ö–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞, –∫–∞–∫ –∏ —ç—Ç–æ—Ç x = [i for i in range(10)]
    admins_list = [
        member.user.id
        for member in admins_list
        if member.status == "creator" or member.status == "administrator"
    ]
    bot.my_admins_list = admins_list
    if message.from_user.id in admins_list:
        await message.delete()
    #print(admins_list)



@user_group_router.message(
    (F.text.lower().contains("–ø—Ä–∞–≤–∏–ª–∞")) | (F.text.lower() == "–ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏"))
@user_group_router.message(Command("rules"))
async def rules_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold("–î–æ–∑–≤–æ–ª–µ–Ω–æ:"),
            "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —ñ–Ω—à—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ —Å–∞–π—Ç–∏ (1 –ø–æ—Å—Ç = 1 —Ç–æ–≤–∞—Ä);",
            '3 (—Ç—Ä–∏) –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ "–ú—ñ—Å—Ü–µ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è";',
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ü–ª–∞—Ç–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è:"),
            "–∫—É–ø—ñ–≤–ª—è/–ø—Ä–æ–¥–∞–∂/–æ—Ä–µ–Ω–¥–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ;",
            "–ø—Ä–æ–¥–∞–∂ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—ñ (–≤—ñ–¥ –∑–∞–±—É–¥–æ–≤–Ω–∏–∫–∞);",
            "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó;",
            "–¢—é—Ç—é–Ω–æ–≤—ñ –≤–∏—Ä–æ–±–∏, –≤–∞–π–ø;",
            "–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏, –±–∞–¥–∏;",
            marker="üí≤ ",
        ),
        as_marked_section(
            Bold("–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:"),
            "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å;",
            "–û–±—Ä–∞–∑–∏ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–∞–π–∫–∞;",
            "–ù–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç (–ø–æ–Ω–∞–¥ 500 —Å–∏–º–≤–æ–ª—ñ–≤);",
            "–§–µ–π–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏/ –ø–æ—Å–ª—É–≥–∏/ –∫—Ä–∏–º–∏–Ω–∞–ª - –±–∞–Ω;",
            "–†–µ–∫–ª–∞–º–∞ –Ω–∞ —Ñ–æ—Ç–æ —ñ–Ω—à–∏—Ö –≥—Ä—É–ø;",
            "–ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏ –±–ª–æ–∫—É–≤–∞—Ç–∏–º—É—Ç—å—Å—è;",
            marker="‚ùå ",
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text.as_html())


@user_group_router.message(F.text.lower() == "–ø–∏—Ç–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏")
@user_group_router.message(Command("ad"))
async def ad_cmd(message: types.Message):
    text = as_list(
         as_marked_section(
            Bold("–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –≤ –¥–µ–Ω—å:"),
            "–î–æ 10 –æ–≥–æ–ª–æ—à–µ–Ω—å (–≤–∫–ª—é—á–Ω–æ) - 50 –≥—Ä–Ω./–¥–æ–±–∞;",
            "–ë–µ–∑–ª—ñ–º - 100 –≥—Ä–Ω./–¥–æ–±–∞;",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ö–û–ú–ï–†–¶–Ü–ô–ù–ò–• –æ–≥–æ–ª–æ—à–µ–Ω—å:"),
            "–Ω–∞ –¥–æ—à—Ü—ñ –í–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ - 100 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 3 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 250 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 5 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 300 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 10 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 500 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            '–Ω–∞ –¥–æ—à–∫–∞—Ö —É—Å—ñ—Ö –º—ñ—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ "–ú—ñ—Å—Ü–µ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" - 1000 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è—Ö:"),
            "–Ω–∞ –¥–æ—à—Ü—ñ –í–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ - 100 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 3 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 250 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 5 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 300 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 10 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 500 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            '–Ω–∞ –¥–æ—à–∫–∞—Ö —É—Å—ñ—Ö –º—ñ—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ "–ú—ñ—Å—Ü–µ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" - 1000 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ê–≤—Ç–æ—Ä–µ–ø–æ—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:"),
            "–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏ - 200 –≥—Ä–Ω./–¥–æ–±–∞;",
            "–ö–æ–∂–Ω–∞ 1 –≥–æ–¥–∏–Ω–∞ - 300 –≥—Ä–Ω./–¥–æ–±–∞;",
            marker="‚úÖ ",
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text.as_html())



@user_group_router.message(CommandStart())
async def start_cmd(message: types.Message, bot: Bot):

    await bot.send_message(
        chat_id=message.chat.id, 
        text="–†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª",
        reply_markup=get_keyboard(
            "–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏",
            "–ü–∏—Ç–∞–Ω–Ω—è —Ä–µ–∫–ª–∞–º–∏",
            placeholder="–†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
            sizes=(2,)
        ),
    )


def clean_text(text: str):
    return text.translate(str.maketrans("", "", punctuation))


@user_group_router.edited_message()
@user_group_router.message()
async def cleaner(message: types.Message):
    if restricted_words.intersection(clean_text(message.text.lower()).split()):
        await message.answer(
            f"{message.from_user.full_name}, –í–∞—Å –∑–∞–±–∞–Ω–µ–Ω–æ! –û–±—Ä–∞–∑–∏ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–∞–π–∫–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–∏!"
        )
        await message.delete()
        # await message.chat.ban(message.from_user.id)
