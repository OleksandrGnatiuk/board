from string import punctuation
from datetime import datetime, timedelta

from aiogram import F, Bot, types, Router
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, session

from kbds.reply import get_keyboard
from common.restricted_words import restricted_words
# from filters.chat_types import ChatTypeFilter
from database.models import User, Post


user_group_router = Router()
# user_group_router.message.filter(ChatTypeFilter(["group", "supergroup"]))
# user_group_router.edited_message.filter(ChatTypeFilter(["group", "supergroup"]))


@user_group_router.message(Command("admin"))
async def get_admins(message: types.Message, bot: Bot):
    chat_id = message.chat.id
    admins_list = await bot.get_chat_administrators(chat_id)
    #–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    #print(admins_list)
    # –ö–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–∞, –∫–∞–∫ –∏ —ç—Ç–æ—Ç x = [i for i in range(10)]
    admins_list = [
        member.user.id
        for member in admins_list
        if member.status == "creator" or member.status == "administrator"
    ]
    bot.my_admins_list = admins_list
    if message.from_user.id in admins_list:
        await message.delete()
    #print(admins_list)


@user_group_router.message(F.text.lower() == "–ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏")
@user_group_router.message(Command("rules"))
async def rules_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold("–î–æ–∑–≤–æ–ª–µ–Ω–æ:"),
            "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –±–µ–∑ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —ñ–Ω—à—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ —Å–∞–π—Ç–∏ (1 –ø–æ—Å—Ç = 1 —Ç–æ–≤–∞—Ä);",
            '–î–ª—è –ø–æ–ª–µ–≥—à–µ–Ω–Ω—è –ø–æ—à—É–∫—É –í–∞—à–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ö–µ—à—Ç–µ–≥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: #—Ñ–æ—Ç–æ–∞–ø–∞—Ä–∞—Ç',
            '3 (—Ç—Ä–∏) –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–∞ –¥–µ–Ω—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ "–ú—ñ—Å—Ü–µ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è";',
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ü–ª–∞—Ç–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è:"),
            "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –ø–æ–Ω–∞–¥ 3 –æ–≥–æ–ª–æ—à–µ–Ω—å –≤ –¥–µ–Ω—å",
            "–∫—É–ø—ñ–≤–ª—è/–ø—Ä–æ–¥–∞–∂/–æ—Ä–µ–Ω–¥–∞ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ;",
            "–ø—Ä–æ–¥–∞–∂ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—ñ (–≤—ñ–¥ –∑–∞–±—É–¥–æ–≤–Ω–∏–∫–∞);",
            "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó;",
            "–ë—É–¥—å-—è–∫—ñ —Å–∏–≥–∞—Ä–µ—Ç–∏, –≤–µ–π–ø–∏, –∫–∞–ª—å—è–Ω–∏, —Ç—é—Ç—é–Ω, glo/iqos...",
            "–ú–µ–¥–∏—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏, –ë–ê–î–∏ —Ç–∞ —ñ–Ω.;",
            marker="üí≤ ",
        ),
        as_marked_section(
            Bold("–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ:"),
            "–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å;",
            "–†–µ–∫–ª–∞–º–∞ –Ω–∞ —Ñ–æ—Ç–æ —ñ–Ω—à–∏—Ö –≥—Ä—É–ø;",
            "–ù–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π —Ç–µ–∫—Å—Ç (–ø–æ–Ω–∞–¥ 500 —Å–∏–º–≤–æ–ª—ñ–≤);",
            "–û–±—Ä–∞–∑–∏ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–∞–π–∫–∞ - –±–∞–Ω;",
            "–§–µ–π–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏/ –ø–æ—Å–ª—É–≥–∏/ –∫—Ä–∏–º–∏–Ω–∞–ª - –±–∞–Ω;",
            marker="üö´ ",
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text.as_html())


@user_group_router.message(F.text.lower() == "–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ä–µ–∫–ª–∞–º–∏")
@user_group_router.message(Command("ad"))
async def ad_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold("–ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –≤ –¥–µ–Ω—å:"),
            "–î–æ 10 –æ–≥–æ–ª–æ—à–µ–Ω—å (–≤–∫–ª—é—á–Ω–æ) - 20 –≥—Ä–Ω.;",
            "–î–æ 50 –æ–≥–æ–ª–æ—à–µ–Ω—å (–≤–∫–ª—é—á–Ω–æ) - 50 –≥—Ä–Ω.;",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–î–æ –ø–ª–∞—Ç–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è:"),
            "–ë—É–¥—å-—è–∫—ñ —Å–∏–≥–∞—Ä–µ—Ç–∏, –≤–µ–π–ø–∏, –∫–∞–ª—å—è–Ω–∏, —Ç—é—Ç—é–Ω, glo/iqos...;",
            "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ñ –Ω–∞–ø–æ—ó;",
            "–ú–µ–¥–∏—á–Ω—ñ —Ç–æ–≤–∞—Ä–∏, –ë–ê–î–∏ —Ç–∞ —ñ–Ω.;",
            "–ü–æ—Å—Ç–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –í–∞—à—ñ —Ä–µ—Å—É—Ä—Å–∏;",
            '–û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–º–µ—Ä—Ü—ñ–π–Ω–æ—é –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—é',
            "–ü—Ä–æ–¥–∞–∂ –ø–µ—Ä–≤–∏–Ω–Ω–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –≤—ñ–¥ –∑–∞–±—É–¥–æ–≤–Ω–∏–∫–∞",
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –ø–ª–∞—Ç–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å:"),
            "–Ω–∞ –¥–æ—à—Ü—ñ –í–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ - 50 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 3 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 120 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 5 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 150 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 10 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 200 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            '–Ω–∞ –¥–æ—à–∫–∞—Ö —É—Å—ñ—Ö –º—ñ—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ "–ú—ñ—Å—Ü–µ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" - 500 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–†–æ–∑–º—ñ—â–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è—Ö:"),
            "–Ω–∞ –¥–æ—à—Ü—ñ –í–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ - 50 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 3 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 120 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 5 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 150 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            "–Ω–∞ –¥–æ—à–∫–∞—Ö 10 –º—ñ—Å—Ç (–Ω–∞ –≤–∏–±—ñ—Ä) - 200 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è;",
            '–Ω–∞ –¥–æ—à–∫–∞—Ö —É—Å—ñ—Ö –º—ñ—Å—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ "–ú—ñ—Å—Ü–µ–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" - 500 –≥—Ä–Ω./–æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
            marker="‚úÖ ",
        ),
        as_marked_section(
            Bold("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–ø–æ—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –æ–¥–Ω—ñ–π –≥—Ä—É–ø—ñ:"),
            "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è 7 –¥–Ω—ñ–≤ - 70 –≥—Ä–Ω.;",
            "–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è 30 –¥–Ω—ñ–≤ - 280 –≥—Ä–Ω.;",
            marker="‚úÖ ",
        ),
        sep="\n----------------------\n",
    )
    await message.answer(text="–ü–æ –ø–∏—Ç–∞–Ω–Ω—è—Ö —Ä–µ–∫–ª–∞–º–∏ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ @trueaaabot")
    await message.answer(text.as_html())


@user_group_router.message(F.text.lower() == "–º—ñ—Å—Ç–∞")
@user_group_router.message(Command("cities"))
async def cities_cmd(message: types.Message):
    text = """
    –°–ª–∞–≤—É—Ç–∞-@slavuta_dd | –ù–µ—Ç—ñ—à–∏–Ω-@netishyn_dd |
–®–µ–ø–µ—Ç—ñ–≤–∫–∞-@shepetivka_dd | """
    await message.answer(text)


@user_group_router.message(CommandStart())
async def start_cmd(message: types.Message, bot: Bot):

    await bot.send_message(
        chat_id=message.chat.id, 
        # text=f'–í—ñ—Ç–∞—î–º–æ –í–∞—Å, {message.from_user.first_name}!\n–í–∏ –≤—Å—Ç—É–ø–∏–ª–∏ –¥–æ –≥—Ä—É–ø–∏, –≤ —è–∫—ñ–π –º–æ–∂–Ω–∞ –∫—É–ø–∏—Ç–∏ —á–∏ –ø—Ä–æ–¥–∞—Ç–∏ –≤—Å–µ, —â–æ –í–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ. –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è —ñ–∑ <b>–ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–∏</b>.\n–î—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!',
        text = '...',
        parse_mode=ParseMode.HTML,
        reply_markup=get_keyboard(
            "–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–∏",
            "–ú—ñ—Å—Ç–∞",
            "–ü–∏—Ç–∞–Ω–Ω—è –∑ —Ä–µ–∫–ª–∞–º–∏",
            placeholder="–†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
            sizes=(3,)
        ),
    )


def clean_text(text: str):
    return text.translate(str.maketrans("", "", punctuation))


@user_group_router.edited_message()
@user_group_router.message()
async def cleaner(message: types.Message, session: AsyncSession):
    text = ''
    if message.text:
        text = message.text
    elif message.caption:
        text = message.caption
    else:
        text = "–º–µ–¥—ñ–∞"

    if restricted_words.intersection(clean_text(text.lower()).split()):
        await message.answer(
            f"{message.from_user.full_name}, –í–∞—Å –∑–∞–±–∞–Ω–µ–Ω–æ! –û–±—Ä–∞–∑–∏ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–∞–π–∫–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–∏!"
            )
        await message.delete()
        # await message.chat.ban(message.from_user.id)
    else:
        result = await session.execute(select(User).filter_by(user_id=message.from_user.id))
        user = result.scalar()
        if not user:
            user = User(user_id=message.from_user.id, full_name=message.from_user.full_name,)
            session.add(user)
            await session.commit()
            await session.refresh(user)
        
        result = await session.execute(select(Post).filter(
                Post.user_id == message.from_user.id,
                (datetime.now() - timedelta(days=1)) < Post.created_at,
                Post.created_at < datetime.now()
                ))
        posts = result.scalars().all()

        if len(posts) >= 3 and int(user.num_paid_post) == 0:
            await message.delete()
            text = f"{message.from_user.first_name}, –í–∏ –ø–µ—Ä–µ–≤–∏—â–∏–ª–∏ –ª—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏!"
            await message.answer(text=text)
        else:
            result = await session.execute(select(Post).filter_by(post_id=message.message_id))
            post = result.scalar()
            if not post:
                post = Post(
                    post_id=message.message_id,
                    user_id=message.from_user.id,
                    text=message.text,
                    caption=message.caption,
                    city=message.chat.username.split("_")[0]
                )
                session.add(post)
                await session.commit()
                await session.refresh(post)
                if int(user.num_paid_post) > 0:
                    user.num_paid_post = int(user.num_paid_post) - 1
                await session.commit()
                await session.refresh(user)
            else:
                post.text = message.text
                post.caption = message.caption
                await session.commit()
                await session.refresh(post)

    

